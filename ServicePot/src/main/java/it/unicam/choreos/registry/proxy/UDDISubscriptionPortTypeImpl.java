/**
 *
 * Copyright (C) 2012  Midhat Ali, Andrea Polini, Guglielmo De Angelis
 *
 * This file is part of ServicePot ver 0.1 .
 *
 * ServicePot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with ServicePot.  If not, see <http:www.gnu.org/licenses/>.
 */
package it.unicam.choreos.registry.proxy;

import it.unicam.choreos.registry.util.UDDIDispatcher;
import it.unicam.choreos.registry.util.UDDIDispatcherFactory;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.Properties;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.osgi.framework.BundleContext;
import org.ow2.choreos.registry.plugin.UDDISubscriptionMonitor;
import org.ow2.choreos.registry.plugin.v2.Wrapper;
import org.uddi.sub_v3.DeleteSubscription;
import org.uddi.sub_v3.GetSubscriptionResults;
import org.uddi.sub_v3.GetSubscriptions;
import org.uddi.sub_v3.SaveSubscription;
import org.uddi.sub_v3.SubscriptionResultsList;
import org.uddi.sub_v3.Subscriptions;
import org.uddi.v3_service.UDDISubscriptionPortType;

/**
 * This class was generated by Apache CXF 2.5.2 2012-02-02T15:16:44.040+01:00
 * Generated source version: 2.5.2
 *
 */
@javax.jws.WebService(serviceName = "UDDISubscriptionService",
portName = "UDDISubscriptionImplPort",
targetNamespace = "urn:uddi-org:v3_service",
//wsdlLocation = "resources/subscription.wsdl",
endpointInterface = "org.uddi.v3_service.UDDISubscriptionPortType")
public class UDDISubscriptionPortTypeImpl extends ServicePotUDDIService implements UDDISubscriptionPortType {

    public UDDISubscriptionPortTypeImpl(String uddiURL) {
        super(uddiURL);
    }

    private static final Logger LOG = Logger.getLogger(UDDISubscriptionPortTypeImpl.class.getName());
    
    private static final Class uddiClass = UDDISubscriptionPortType.class;
    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDISubscriptionPortType#getSubscriptionResults(org.uddi.sub_v3.GetSubscriptionResults
     * body )*
     */
    

    public UDDISubscriptionPortTypeImpl() throws IOException {
        Properties properties = new Properties();
        properties.load(this.getClass().getClassLoader().getResourceAsStream("UDDIProxy.properties"));
        uddiURL = properties.getProperty("UDDI.Endpoint.Subscription");
    }
    public UDDISubscriptionPortTypeImpl(BundleContext bc) throws IOException {
        this();
        this.bc=bc;
     
    }

    public org.uddi.sub_v3.SubscriptionResultsList getSubscriptionResults(org.uddi.sub_v3.GetSubscriptionResults body) {
   
        
        String opid = UUID.randomUUID().toString();
        Wrapper<GetSubscriptionResults> inputWrapper=new Wrapper<GetSubscriptionResults>(body);
        callPlugins(UDDISubscriptionMonitor.class, "beforeGetSubscriptionResults", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDISubscriptionMonitor.class, "beforeGetSubscriptionResults", inputWrapper, opid);
   
        body=inputWrapper.getContents();
        
        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        SubscriptionResultsList output = null;
        try {
            output=dispatcher.dispatchFirstMethod(uddiClass, "getSubscriptionResults", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
        
        Wrapper<SubscriptionResultsList> outputWrapper=new Wrapper<SubscriptionResultsList>(output);
            callPlugins(UDDISubscriptionMonitor.class, "afterGetSubscriptionResults", output);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDISubscriptionMonitor.class, "afterGetSubscriptionResults", outputWrapper, opid);
        output=outputWrapper.getContents();
        return output;


    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDISubscriptionPortType#getSubscriptions(org.uddi.sub_v3.GetSubscriptions
     * parameters )*
     */
    public org.uddi.sub_v3.Subscriptions getSubscriptions(org.uddi.sub_v3.GetSubscriptions parameters) {
   
            String opid = UUID.randomUUID().toString();
        Wrapper<GetSubscriptions> inputWrapper=new Wrapper<GetSubscriptions>(parameters);
        callPlugins(UDDISubscriptionMonitor.class, "beforeGetSubscriptions", parameters);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDISubscriptionMonitor.class, "beforeGetSubscriptions", inputWrapper, opid);
   
        parameters=inputWrapper.getContents();
        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        Subscriptions output = null;
        try {
            output=dispatcher.dispatchFirstMethod(uddiClass, "getSubscriptions", parameters);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
        
        Wrapper<Subscriptions> outputWrapper=new Wrapper<Subscriptions>(output);
        callPlugins(UDDISubscriptionMonitor.class, "afterGetSubscriptions", parameters);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDISubscriptionMonitor.class, "afterGetSubscriptions", outputWrapper, opid);
        output=outputWrapper.getContents();
        return output;
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDISubscriptionPortType#deleteSubscription(org.uddi.sub_v3.DeleteSubscription
     * body )*
     */
    public void deleteSubscription(org.uddi.sub_v3.DeleteSubscription body) {
        
            String opid = UUID.randomUUID().toString();
        Wrapper<DeleteSubscription> inputWrapper=new Wrapper<DeleteSubscription>(body);
        callPlugins(UDDISubscriptionMonitor.class, "beforeDeleteSubscription", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDISubscriptionMonitor.class, "beforeDeleteSubscription", inputWrapper, opid);
   
        body=inputWrapper.getContents();
        
        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);

        try {
            dispatcher.dispatchFirstMethod(uddiClass, "deleteSubscription", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
        callPlugins(UDDISubscriptionMonitor.class, "afterDeleteSubscription");
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDISubscriptionMonitor.class, "afterDeleteSubscription", opid);
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDISubscriptionPortType#saveSubscription(org.uddi.sub_v3.SaveSubscription
     * parameters )*
     */
    public org.uddi.sub_v3.Subscriptions saveSubscription(org.uddi.sub_v3.SaveSubscription parameters) {
        
            String opid = UUID.randomUUID().toString();
        Wrapper<SaveSubscription> inputWrapper=new Wrapper<SaveSubscription>(parameters);
        callPlugins(UDDISubscriptionMonitor.class, "beforeSaveSubscription", parameters);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDISubscriptionMonitor.class, "beforeSaveSubscription", inputWrapper, opid);
   
        parameters=inputWrapper.getContents();
        
        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        Subscriptions output = null;
        try {
            output=dispatcher.dispatchFirstMethod(uddiClass, "saveSubscription", parameters);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
       
        Wrapper<Subscriptions> outputWrapper=new Wrapper<Subscriptions>(output);
        callPlugins(UDDISubscriptionMonitor.class, "afterSaveSubscription", parameters);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDISubscriptionMonitor.class, "afterSaveSubscription", outputWrapper, opid);
   output=outputWrapper.getContents();
        
        return output;
    }
}
