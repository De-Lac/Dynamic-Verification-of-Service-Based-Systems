/**
 *
 * Copyright (C) 2012  Midhat Ali, Andrea Polini, Guglielmo De Angelis
 *
 * This file is part of ServicePot ver 0.1 .
 *
 * ServicePot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with ServicePot.  If not, see <http:www.gnu.org/licenses/>.
 */
/**
 * Please modify this class to meet your needs This class is not complete
 */
package it.unicam.choreos.registry.proxy;

import it.unicam.choreos.registry.util.UDDIDispatcher;
import it.unicam.choreos.registry.util.UDDIDispatcherFactory;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.osgi.framework.BundleContext;
import org.uddi.api_v3.AuthToken;
import org.uddi.v3_service.UDDISecurityPortType;

/**
 * This class was generated by Apache CXF 2.5.2 2012-02-02T15:16:09.694+01:00
 * Generated source version: 2.5.2
 *
 */
@javax.jws.WebService(serviceName = "UDDISecurityService",
portName = "UDDISecurityImplPort",
targetNamespace = "urn:uddi-org:v3_service",
//wsdlLocation = "resources/security.wsdl",
endpointInterface = "org.uddi.v3_service.UDDISecurityPortType")
public class UDDISecurityPortTypeImpl extends ServicePotUDDIService implements UDDISecurityPortType {

    private static final Logger LOG = Logger.getLogger(UDDISecurityPortTypeImpl.class.getName());
    
    private static final Class uddiClass = UDDISecurityPortType.class;

    public UDDISecurityPortTypeImpl(String uddiURL) {
        super(uddiURL);
    }
    

    public UDDISecurityPortTypeImpl() throws IOException {
        Properties properties = new Properties();
        properties.load(this.getClass().getClassLoader().getResourceAsStream("UDDIProxy.properties"));
        uddiURL = properties.getProperty("UDDI.Endpoint.Security");
    }

    public UDDISecurityPortTypeImpl(BundleContext bc) throws IOException {
        this();
        this.bc = bc;
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDISecurityPortType#discardAuthToken(org.uddi.api_v3.DiscardAuthToken
     * body )*
     */
    public void discardAuthToken(org.uddi.api_v3.DiscardAuthToken body) {
   
   
        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);

        try {
            dispatcher.dispatchFirstMethod(uddiClass, "discardAuthToken", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
   
   
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDISecurityPortType#getAuthToken(org.uddi.api_v3.GetAuthToken
     * body )*
     */
    public org.uddi.api_v3.AuthToken getAuthToken(org.uddi.api_v3.GetAuthToken body) {
  
   
        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        AuthToken output = null;
        try {
            output = dispatcher.dispatchFirstMethod(uddiClass, "getAuthToken", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace(System.out);
        }
  
        return output;
    }
}
