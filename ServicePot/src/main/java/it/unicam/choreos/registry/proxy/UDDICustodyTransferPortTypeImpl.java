/**
 *
 * Copyright (C) 2012  Midhat Ali, Andrea Polini, Guglielmo De Angelis
 *
 * This file is part of ServicePot ver 0.1 .
 *
 * ServicePot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with ServicePot.  If not, see <http:www.gnu.org/licenses/>.
 */
/**
 * Please modify this class to meet your needs This class is not complete
 */
package it.unicam.choreos.registry.proxy;

import it.unicam.choreos.registry.util.UDDIDispatcher;
import it.unicam.choreos.registry.util.UDDIDispatcherFactory;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.Properties;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.osgi.framework.BundleContext;
import org.ow2.choreos.registry.plugin.UDDICustodyTransferMonitor;
import org.ow2.choreos.registry.plugin.v2.Wrapper;
import org.uddi.custody_v3.DiscardTransferToken;
import org.uddi.custody_v3.GetTransferToken;
import org.uddi.custody_v3.TransferEntities;
import org.uddi.custody_v3.TransferToken;
import org.uddi.v3_service.UDDICustodyTransferPortType;

/**
 * This class was generated by Apache CXF 2.5.2 2012-02-02T15:15:17.574+01:00
 * Generated source version: 2.5.2
 *
 */
@javax.jws.WebService(serviceName = "UDDICustodyTransferService",
portName = "UDDICustodyTransferImplPort",
targetNamespace = "urn:uddi-org:v3_service",
//wsdlLocation = "resources/custody-transfer.wsdl",
endpointInterface = "org.uddi.v3_service.UDDICustodyTransferPortType")
public class UDDICustodyTransferPortTypeImpl extends ServicePotUDDIService implements UDDICustodyTransferPortType {

    private static final Logger LOG = Logger.getLogger(UDDICustodyTransferPortTypeImpl.class.getName());
    
    private final Class uddiClass = UDDICustodyTransferPortType.class;
    /*
     * (non-Javadoc) @see
     * BusinessListorg.uddi.v3_service.UDDICustodyTransferPortType#transferEntities(org.uddi.custody_v3.TransferEntities
     * body )*
     */
    

    public UDDICustodyTransferPortTypeImpl() throws IOException {
        Properties properties=new Properties();
        properties.load(this.getClass().getClassLoader().getResourceAsStream("UDDIProxy.properties"));
        uddiURL=properties.getProperty("UDDI.Endpoint.CustodyTransfer");
        
    }
    
    public UDDICustodyTransferPortTypeImpl(BundleContext bc) throws IOException {
        this();
        this.bc=bc;   
    }

    public UDDICustodyTransferPortTypeImpl(String uddiURL) {
        super(uddiURL);
    }
    
    

    public void transferEntities(org.uddi.custody_v3.TransferEntities body) {
   
        
         String opid = UUID.randomUUID().toString();
         Wrapper<TransferEntities> inputWrapper=new Wrapper<TransferEntities>(body);
        callPlugins(UDDICustodyTransferMonitor.class, "beforeTransferEntities", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDICustodyTransferMonitor.class, "beforeTransferEntities", inputWrapper, opid);
   body=inputWrapper.getContents();

        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);

        try {
            dispatcher.dispatchFirstMethod(uddiClass, "transferEntities", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
       
        callPlugins(UDDICustodyTransferMonitor.class, "afterTransferEntities");
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDICustodyTransferMonitor.class, "afterTransferEntities", opid);
   
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDICustodyTransferPortType#discardTransferToken(org.uddi.custody_v3.DiscardTransferToken
     * body )*
     */
    public void discardTransferToken(org.uddi.custody_v3.DiscardTransferToken body) {
              String opid = UUID.randomUUID().toString();
              Wrapper<DiscardTransferToken> inputWrapper=new Wrapper<DiscardTransferToken>(body);
        callPlugins(UDDICustodyTransferMonitor.class, "beforeDiscardTransferToken", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDICustodyTransferMonitor.class, "beforeDiscardTransferToken", inputWrapper, opid);
   body=inputWrapper.getContents();
        
        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);

        try {
            dispatcher.dispatchFirstMethod(uddiClass, "discardTransferToken", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
        
        callPlugins(UDDICustodyTransferMonitor.class, "afterDiscardTransferToken");
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDICustodyTransferMonitor.class, "afterSDiscardTransferToken", opid);
         
              
              
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDICustodyTransferPortType#getTransferToken(org.uddi.custody_v3.GetTransferToken
     * parameters )*
     */
    public org.uddi.custody_v3.TransferToken getTransferToken(org.uddi.custody_v3.GetTransferToken body) {
  
        
              
        String opid = UUID.randomUUID().toString();
        Wrapper<GetTransferToken> inputWrapper=new Wrapper<GetTransferToken>(body);
        callPlugins(UDDICustodyTransferMonitor.class, "beforeGetTransferToken", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDICustodyTransferMonitor.class, "beforeGetTransferToken", inputWrapper, opid);
   body=inputWrapper.getContents();
        
        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        TransferToken output = null;
        try {
            output = dispatcher.dispatchFirstMethod(uddiClass, "getTransferToken", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
        Wrapper<TransferToken> outputWrapper=new Wrapper<TransferToken>(output);
              callPlugins(UDDICustodyTransferMonitor.class, "afterGetTransferToken", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDICustodyTransferMonitor.class, "afterGetTransferToken", outputWrapper, opid);
        output=outputWrapper.getContents();
        return output;
    }
}
