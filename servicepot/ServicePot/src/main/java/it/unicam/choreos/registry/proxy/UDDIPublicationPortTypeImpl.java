/**
 *
 * Copyright (C) 2012  Midhat Ali, Andrea Polini, Guglielmo De Angelis
 *
 * This file is part of ServicePot ver 0.1 .
 *
 * ServicePot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with ServicePot.  If not, see <http:www.gnu.org/licenses/>.
 */
/**
 * Please modify this class to meet your needs This class is not complete
 */
package it.unicam.choreos.registry.proxy;

import it.unicam.choreos.registry.util.UDDIDispatcher;
import it.unicam.choreos.registry.util.UDDIDispatcherFactory;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.Properties;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.ws.Holder;
import org.osgi.framework.BundleContext;
import org.ow2.choreos.registry.plugin.UDDIPublicationMonitor;
import org.ow2.choreos.registry.plugin.v2.Wrapper;
import org.uddi.api_v3.*;
import org.uddi.v3_service.UDDIPublicationPortType;

/**
 * This class was generated by Apache CXF 2.5.2 2012-02-02T15:15:57.363+01:00
 * Generated source version: 2.5.2
 *
 */
@javax.jws.WebService(serviceName = "UDDIPublicationService",
portName = "UDDIPublicationImplPort",
targetNamespace = "urn:uddi-org:v3_service",
//wsdlLocation = "resources/publish.wsdl",
endpointInterface = "org.uddi.v3_service.UDDIPublicationPortType")
public class UDDIPublicationPortTypeImpl extends ServicePotUDDIService implements UDDIPublicationPortType {
    
    private static final Logger LOG = Logger.getLogger(UDDIPublicationPortTypeImpl.class.getName());
    
    private static final Class uddiClass = UDDIPublicationPortType.class;
    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDIPublicationPortType#deleteBinding(org.uddi.api_v3.DeleteBinding
     * body )*
     */
    
    
    public UDDIPublicationPortTypeImpl() throws IOException {
        
        Properties properties = new Properties();
        properties.load(this.getClass().getClassLoader().getResourceAsStream("UDDIProxy.properties"));
        uddiURL = properties.getProperty("UDDI.Endpoint.Publication");
        System.out.println("UDDIPublication: "+uddiURL);
    }

    public UDDIPublicationPortTypeImpl(BundleContext bc) throws IOException {
        this();
        this.bc = bc;
    }

    public UDDIPublicationPortTypeImpl(String uddiURL) {
        super(uddiURL);
    }
    
    public void deleteBinding(org.uddi.api_v3.DeleteBinding body) {
        String opid = UUID.randomUUID().toString();
        Wrapper<DeleteBinding> inputWrapper=new Wrapper<DeleteBinding>(body);
        callPlugins(UDDIPublicationMonitor.class, "beforeDeleteBinding", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "beforeDeleteBinding", inputWrapper, opid);
   
 body=inputWrapper.getContents();
        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        
        try {
            dispatcher.dispatchFirstMethod(uddiClass, "deleteBinding", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
         
        callPlugins(UDDIPublicationMonitor.class, "afterDeleteBinding");
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "afterDeleteBinding", opid);
   
        
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDIPublicationPortType#saveTModel(org.uddi.api_v3.SaveTModel
     * body )*
     */
    public org.uddi.api_v3.TModelDetail saveTModel(org.uddi.api_v3.SaveTModel body) {

    String opid = UUID.randomUUID().toString();
    Wrapper<SaveTModel> inputWrapper=new Wrapper<SaveTModel>(body);
        callPlugins(UDDIPublicationMonitor.class, "beforeSaveTModel", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "beforeSaveTModel", inputWrapper, opid);
body=inputWrapper.getContents();        
		System.out.println("!!!!!!!!! "+uddiURL+" !!!!!!!!");
        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        TModelDetail output = null;
        try {
            output = dispatcher.dispatchFirstMethod(uddiClass, "saveTModel", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
         
Wrapper<TModelDetail> outputWrapper=new Wrapper<TModelDetail>(output);
        callPlugins(UDDIPublicationMonitor.class, "afterSaveTModel", output);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "afterSaveTModel", outputWrapper, opid);
   output=outputWrapper.getContents();

        
        return output;
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDIPublicationPortType#addPublisherAssertions(org.uddi.api_v3.AddPublisherAssertions
     * body )*
     */
    public void addPublisherAssertions(org.uddi.api_v3.AddPublisherAssertions body) {

        Wrapper<AddPublisherAssertions> inputWrapper=new Wrapper<AddPublisherAssertions>(body);
         String opid = UUID.randomUUID().toString();
        callPlugins(UDDIPublicationMonitor.class, "beforeAddPublisherAssertions", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "beforeAddPublisherAssertions", inputWrapper, opid);
   body=inputWrapper.getContents();

        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        
        try {
            dispatcher.dispatchFirstMethod(uddiClass, "addPublisherAssertions", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
        
         
        callPlugins(UDDIPublicationMonitor.class, "afterAddPublisherAssertions");
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "afterAddPublisherAssertions", opid);
   

    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDIPublicationPortType#deleteBusiness(org.uddi.api_v3.DeleteBusiness
     * body )*
     */
    public void deleteBusiness(org.uddi.api_v3.DeleteBusiness body) {

         String opid = UUID.randomUUID().toString();
         Wrapper<DeleteBusiness> inputWrapper=new Wrapper<DeleteBusiness>(body);
        callPlugins(UDDIPublicationMonitor.class, "beforeDeleteBusiness", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "beforeDeleteBusiness", inputWrapper, opid);
        body=inputWrapper.getContents();

        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        
        try {
            dispatcher.dispatchFirstMethod(uddiClass, "deleteBusiness", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
        
        callPlugins(UDDIPublicationMonitor.class, "afterDeleteBusiness");
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "afterDeleteBusiness", opid);

    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDIPublicationPortType#saveService(org.uddi.api_v3.SaveService
     * body )*
     */
    public org.uddi.api_v3.ServiceDetail saveService(org.uddi.api_v3.SaveService body) {
 
        
         String opid = UUID.randomUUID().toString();
         
         Wrapper<SaveService> inputWrapper=new Wrapper<SaveService>(body);
        callPlugins(UDDIPublicationMonitor.class, "beforeSaveService", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "beforeSaveService", inputWrapper, opid);
   body=inputWrapper.getContents();

        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        ServiceDetail output = null;
        try {
            output = dispatcher.dispatchFirstMethod(uddiClass, "saveService", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
        
        Wrapper<ServiceDetail> outputWrapper=new Wrapper<ServiceDetail>(output);
               callPlugins(UDDIPublicationMonitor.class, "afterSaveService", outputWrapper);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "afterSaveService", outputWrapper, opid);
 output=outputWrapper.getContents();
        return output;
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDIPublicationPortType#deletePublisherAssertions(org.uddi.api_v3.DeletePublisherAssertions
     * body )*
     */
    public void deletePublisherAssertions(org.uddi.api_v3.DeletePublisherAssertions body) {

         String opid = UUID.randomUUID().toString();
         Wrapper<DeletePublisherAssertions> inputWrapper=new Wrapper<DeletePublisherAssertions>(body);
        callPlugins(UDDIPublicationMonitor.class, "beforeDeletePublisherAssertions", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "beforeDeletePublisherAssertions", inputWrapper, opid);
        body=inputWrapper.getContents();

        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        
        try {
            dispatcher.dispatchFirstMethod(uddiClass, "deletePublisherAssertions", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
        callPlugins(UDDIPublicationMonitor.class, "afterDeletePublisherAssertions");
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "afterDeletePublisherAssertions", opid);
   
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDIPublicationPortType#setPublisherAssertions(java.lang.String
     * authInfo ,)java.util.List<org.uddi.api_v3.PublisherAssertion>
     * publisherAssertion )*
     */
    public void setPublisherAssertions(java.lang.String authInfo, javax.xml.ws.Holder<java.util.List<org.uddi.api_v3.PublisherAssertion>> publisherAssertion) {
    
         String opid = UUID.randomUUID().toString();
         Wrapper<String> authInfoWrapper=new Wrapper<String>(authInfo);
         Wrapper<Holder<List<PublisherAssertion>>> publisherAssertionWrapper=new Wrapper<Holder<List<PublisherAssertion>>>(publisherAssertion);
        callPlugins(UDDIPublicationMonitor.class, "beforeSetPublisherAssertions", authInfo,publisherAssertion);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "beforeSetPublisherAssertions", authInfoWrapper, publisherAssertionWrapper,opid);
   authInfo=authInfoWrapper.getContents();
    publisherAssertion=publisherAssertionWrapper.getContents();

        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        
        try {
            dispatcher.dispatchFirstMethod(uddiClass, "setPublisherAssertions", authInfo,publisherAssertion);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
        callPlugins(UDDIPublicationMonitor.class, "afterSetPublisherAssertions");
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "afterSetPublisherAssertions",opid);
   
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDIPublicationPortType#getPublisherAssertions(java.lang.String
     * authInfo )*
     */
    public java.util.List<org.uddi.api_v3.PublisherAssertion> getPublisherAssertions(java.lang.String authInfo) {
        
         String opid = UUID.randomUUID().toString();
         Wrapper<String> inputWrapper=new Wrapper<String>(authInfo);
        callPlugins(UDDIPublicationMonitor.class, "beforeGetPublisherAssertions", authInfo);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "beforeGetPublisherAssertions", inputWrapper, opid);
        authInfo=inputWrapper.getContents();
   

        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        List<org.uddi.api_v3.PublisherAssertion> output = null;
        try {
            output = dispatcher.dispatchFirstMethod(uddiClass, "getPublisherAssertions", authInfo);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
        Wrapper<java.util.List<org.uddi.api_v3.PublisherAssertion>> outputwWrapper=new Wrapper<List<PublisherAssertion>>(output);
        callPlugins(UDDIPublicationMonitor.class, "afterGetPublisherAssertions", output);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "afterGetPublisherAssertions", outputwWrapper, opid);
  output=outputwWrapper.getContents();
        return output;
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDIPublicationPortType#deleteService(org.uddi.api_v3.DeleteService
     * body )*
     */
    public void deleteService(org.uddi.api_v3.DeleteService body) {
   
         String opid = UUID.randomUUID().toString();
         Wrapper<DeleteService> inputWrapper=new Wrapper<DeleteService>(body);
        callPlugins(UDDIPublicationMonitor.class, "beforeDeleteService", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "beforeDeleteService", inputWrapper, opid);
   body=inputWrapper
          .getContents();

        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        
        try {
            dispatcher.dispatchFirstMethod(uddiClass, "deleteService", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
 callPlugins(UDDIPublicationMonitor.class, "afterDeleteService");
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "afterDeleteService", opid);
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDIPublicationPortType#saveBinding(org.uddi.api_v3.SaveBinding
     * body )*
     */
    public org.uddi.api_v3.BindingDetail saveBinding(org.uddi.api_v3.SaveBinding body) {
       String opid = UUID.randomUUID().toString();
       Wrapper<SaveBinding> inputWrapper=new Wrapper<SaveBinding>(body);
        callPlugins(UDDIPublicationMonitor.class, "beforeSaveBinding", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "beforeSaveBinding", inputWrapper, opid);
   body=inputWrapper.getContents();

        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        BindingDetail output = null;
        try {
            output = dispatcher.dispatchFirstMethod(uddiClass, "saveBinding", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
        
        Wrapper<BindingDetail> outputWrapper=new Wrapper<BindingDetail>(output);
          callPlugins(UDDIPublicationMonitor.class, "afterSaveBinding", output);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "afterSaveBinding", outputWrapper, opid);
   output=outputWrapper.getContents();
        return output;
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDIPublicationPortType#saveBusiness(org.uddi.api_v3.SaveBusiness
     * body )*
     */
    public org.uddi.api_v3.BusinessDetail saveBusiness(org.uddi.api_v3.SaveBusiness body) {
        
        
        Wrapper<SaveBusiness> inputWrapper=new Wrapper<SaveBusiness>(body);
         String opid = UUID.randomUUID().toString();
        callPlugins(UDDIPublicationMonitor.class, "beforeSaveBusiness", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "beforeSaveBusiness", inputWrapper, opid);
   body=inputWrapper.getContents();

        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        BusinessDetail output = null;
        try {
            output = dispatcher.dispatchFirstMethod(uddiClass, "saveBusiness", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
        Wrapper<BusinessDetail> outputWrapper=new Wrapper<BusinessDetail>(output);
        callPlugins(UDDIPublicationMonitor.class, "afterSaveBusiness", output);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "afterSaveBusiness", outputWrapper, opid);
        output=outputWrapper.getContents();
        return output;
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDIPublicationPortType#getRegisteredInfo(org.uddi.api_v3.GetRegisteredInfo
     * body )*
     */
    public org.uddi.api_v3.RegisteredInfo getRegisteredInfo(org.uddi.api_v3.GetRegisteredInfo body) {
  
         String opid = UUID.randomUUID().toString();
         Wrapper<GetRegisteredInfo> inputWrapper=new Wrapper<GetRegisteredInfo>(body);
        callPlugins(UDDIPublicationMonitor.class, "beforeGetRegisteredInfo", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "beforeGetRegisteredInfo", inputWrapper, opid);
   body=inputWrapper.getContents();

        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        RegisteredInfo output = null;
        try {
            output = dispatcher.dispatchFirstMethod(uddiClass, "getRegisteredInfo", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
        Wrapper<RegisteredInfo> outputWrapper=new Wrapper<RegisteredInfo>(output);
     callPlugins(UDDIPublicationMonitor.class, "afterGetRegisteredInfo", output);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "afterGetRegisteredInfo", outputWrapper, opid);
        output=outputWrapper.getContents();
        return output;
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDIPublicationPortType#getAssertionStatusReport(java.lang.String
     * authInfo ,)org.uddi.api_v3.CompletionStatus completionStatus )*
     */
    public java.util.List<org.uddi.api_v3.AssertionStatusItem> getAssertionStatusReport(java.lang.String authInfo, org.uddi.api_v3.CompletionStatus completionStatus) {

        
         String opid = UUID.randomUUID().toString();
         Wrapper<String> authInfoWrapper=new Wrapper<String>(authInfo);
         Wrapper<CompletionStatus> completionStatusWrapper=new Wrapper<CompletionStatus>(completionStatus);
        callPlugins(UDDIPublicationMonitor.class, "beforeGetAssertionStatusReport", authInfo,completionStatus);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "beforeGetAssertionStatusReport", authInfoWrapper,completionStatusWrapper,opid);
   authInfo=authInfoWrapper.getContents();
   completionStatus=completionStatusWrapper.getContents();

        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        List<org.uddi.api_v3.AssertionStatusItem> output = null;
        try {
            output = dispatcher.dispatchFirstMethod(uddiClass, "getAssertionStatusReport", authInfo);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
        Wrapper<List<org.uddi.api_v3.AssertionStatusItem>> outputWrapper=new Wrapper<List<AssertionStatusItem>>(output);
        callPlugins(UDDIPublicationMonitor.class, "afterGetAssertionStatusReport", authInfo,completionStatus);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "afterGetAssertionStatusReport", authInfo,completionStatus,opid);
        output=outputWrapper.getContents();
        return output;
    }

    /*
     * (non-Javadoc) @see
     * org.uddi.v3_service.UDDIPublicationPortType#deleteTModel(org.uddi.api_v3.DeleteTModel
     * body )*
     */
    public void deleteTModel(org.uddi.api_v3.DeleteTModel body) {
   
         String opid = UUID.randomUUID().toString();
         Wrapper<DeleteTModel> inputWrapper=new Wrapper<DeleteTModel>(body);
        callPlugins(UDDIPublicationMonitor.class, "beforeDeleteTModel", body);
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "beforeDeleteTModel", inputWrapper, opid);
        body=inputWrapper.getContents();

        UDDIDispatcher dispatcher = UDDIDispatcherFactory.createDispatcher(uddiURL);
        
        try {
            dispatcher.dispatchFirstMethod(uddiClass, "deleteTModel", body);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        } catch (InvocationTargetException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }
             callPlugins(UDDIPublicationMonitor.class, "afterDeleteTModel");
        callPlugins(org.ow2.choreos.registry.plugin.v2.UDDIPublicationMonitor.class, "afterDeleteTModel",  opid);
   
    }
}
